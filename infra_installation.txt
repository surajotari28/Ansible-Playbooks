Create User To Install Ansible & Terraform
	- sudo useradd ansible
	- echo "ansible ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/ansible
	- sudo su ansible

Install Terraform
	- sudo su ansible
	- sudo yum install wget unzip -y
	- wget https://releases.hashicorp.com/terraform/0.12.26/terraform_0.12.26_linux_amd64.zip
	- sudo unzipterraform_0.12.26_linux_amd64.zip -d /usr/local/bin/
	- export PATH=$PATH:/usr/local/bin
	- vi .bashrc
		export PATH="$PATH:/usr/local/bin"
	- source ~/.bashrc

Ansible Installation
	- sudo su ansible
	- sudo yum install python3 -y
	- sudo alternatives --set python /usr/bin/python3
	- sudo yum -y install python3-pip -y
	- pip3 install ansible --user
	- pip3 install boto3 --user

Clone teraform and ansible scripts
	- git clone https://github.com/MithunTechnologiesDevops/Kuberentes_Cluster_Terraform_Ansible.git
	- cd Kuberentes_Cluster_Terraform_Ansible

Create Infrastructure(VPC, Subnets, Route Table, EC2 Instance) As A Code Using Terraform Scripts
	- terraform init terafrom_scripts/
	- terraform validate terafrom_scripts/
	- terraform plan terafrom_scripts/
	- terraform apply --auto-approve terafrom_scripts/

Configuration Management
check if DynamicInventory Script works
	- chmod +x DynamicInventory.py
	./DynamicInventory.py --list

Kuberentes Cluster Setup Using Ansible (Configuration Management) With DynamicInventory.
 note: create pem file and copy aws private key (pem) file content which you used in terraform

 - vi devops.pem
 chmod 400 devops.pem

 ansible-playbook -i DynamicInventory.py site.yml -u ubuntu --private-key=<PemFilePath> --ssh-common-args "-o StrictHostKeyChecking=no"

 Destroy Infrastructure

 terraform destroy --auto-approve terafrom_scripts/